library(tidyverse)
library(caret)
library(randomForest)
library(maptree)
library(beepr)



# Data setup --------------------------------------------------------------

#Read the relative density data frame
dframe <- read.csv("data/mtnash_dualcover.csv")
dframe <- dplyr::select(dframe, -v90)
df2007 <- filter(dframe, year == "2007")
df2016 <- filter(dframe, year == "2016")


##Select a portion of the data to compare models
set.seed(4911)

sample <- sample.int(length(df2007$X), 5000)

sample2007 <- df2007[sample, ]
sample2016 <- df2016[sample, ]


#list the seed values used in the trials
seedvals <- c(406, 927, 808, 902, 12, 28, 117, 822, 9876, 3578)
trials <- c(1:10)
prop <- 0.0023 #proportion of data to be used for model building


dframe <- filter(dframe, year == "2016")

# Generate the proximitiy matrices ----------------------------------------


func <- function (a, b){
  seed <- a
  trial <- b
  
  #set the seed used to produce the model
  set.seed(seed)
  
  #Cut the data into training data
  train <- createDataPartition(dframe$X, 
                               time=1,#the number of partitions to create 
                               p = prop,#the percentage of data that goes to training
                               list=F)
  
  data_train <- dframe[train,]
  
  
  
  # Unsup data clusters -----------------------------------------------------
  
  set.seed(Sys.time())
  unsupRF <- randomForest(x = data_train[,4:11], mtry = 3, ntree = 1000, proximity = TRUE)

  
  #Save the model
  saveRDS(unsupRF, paste0("Data/2016/RFtrial",trial, "_rep", rep, ".rds"))
  
  
  #Get the proximity matrix from the RF object and convert to distance
  proximity <- unsupRF$proximity
  prox <- as.dist(1-proximity)
  saveRDS(prox, paste0("Data/2016/Proxtrial",trial, "_rep", rep, ".rds"))

}


for(i in 1:5){
  rep <- i
  
  mapply(FUN = func, a = seedvals, b = trials)
}
 beep()





# Average the proximity matrices ------------------------------------------



fun2 <- function (x) {
  
  trial <- x
  
  prox1 <- readRDS(paste0("Data/2016/Proxtrial", trial, "_rep1.rds"))
  prox2 <- readRDS(paste0("Data/2016/Proxtrial", trial, "_rep2.rds"))
  prox3 <- readRDS(paste0("Data/2016/Proxtrial", trial, "_rep3.rds"))
  prox4 <- readRDS(paste0("Data/2016/Proxtrial", trial, "_rep4.rds"))
  prox5 <- readRDS(paste0("Data/2016/Proxtrial", trial, "_rep5.rds"))
  
  av_prox <- (prox1 + prox2 + prox3 + prox4 + prox5)/5
  saveRDS(av_prox, paste0("Data/2016/AvProx_", trial, ".rds"))
}

mapply(FUN = fun2, x = trials)
beep()




# Plot Clusters --------------------------------------------------------------



fun3 <- function(x , y){
  
  seed <- x
  trial <- y
  
  
  #set the seed used to produce the model
  set.seed(seed)
  
  #Cut the data into training data
  train <- createDataPartition(dframe$X, 
                               time=1,#the number of partitions to create 
                               p = prop,#the percentage of data that goes to training
                               list=F)
  
  data_train <- dframe[train,]
  
  
  

  #Load the proximity object and convert to distance
  proximity <- readRDS(paste0("Data/2016/AvProx_", trial, ".rds"))
  
  #Use the dissimilarity matrix to cluster
  clust <- hclust(proximity, method = "ward.D2")
  saveRDS(clust, paste0("Data/2016/Clust_", trial, ".rds"))
  
  rm(proximity)

  
  #Cut the tree into 6 clusters
  sub_group <- cutree(clust, k = 6)
  
  #Add cluster labels to original data
  ctrain <- data_train %>%
    mutate(cluster = sub_group)
  
  #Calculate mean at height bin for each cluster
  sumstats <- ctrain %>% group_by(cluster) %>%
    summarise( "10" = mean(v10), "20" = mean(v20),
               "30" = mean(v30), "40" = mean(v40),
               "50" = mean(v50), "60" = mean(v60), 
               "70" = mean(v70), "80" = mean(v80))
  
  sumstats_long <- pivot_longer(sumstats, cols=2:9, names_to = "Height")
  
  #Plot and save
  g <- ggplot(sumstats_long, aes(x = Height, y = value)) +
    geom_point() + 
    facet_grid(~cluster) +
    coord_flip() + 
    ggtitle("Vertical profiles for Training clusters")
  g
  ggsave(plot = g, filename = paste0("Data/2016/profiles_", trial, ".jpg"), device = "jpeg")
}


mapply(FUN = fun3, x = seedvals, y = trials)
beep()




# Predict the data sample -------------------------------------------------


fun4 <- function (a, b) {
  
  seed <- a
  trial <- b
  
# Data set up -------------------------------------------------

  #set the seed used to produce the model
  set.seed(seed)
  
  #Cut the data into training data
  train <- createDataPartition(dframe$X, 
                               time=1,#the number of partitions to create 
                               p = prop,#the percentage of data that goes to training
                               list=F)
  
  data_train <- dframe[train,]
  
  
  

# Read cluster data and build model ---------------------------------------
  clust <- readRDS(paste0("Data/2016/Clust_", trial, ".rds"))
  
  
  #Cut the tree into 6 clusters
  sub_group <- cutree(clust, k = 6)
  
  #Add cluster labels to original data
  ctrain <- data_train %>%
    mutate(cluster = sub_group)

  #Turn cluster into factor
  ctrain$cluster <- as.factor(ctrain$cluster)
  
  #Build a RF that classifies clusters
  rfclust <- randomForest(x = ctrain[,4:11],
                          y = ctrain$cluster,
                          ntree=1000,
                          proximity=TRUE, 
                          mtry=3)
  
  saveRDS(rfclust, paste0("Data/2016/RFclass_", trial, ".rds"))
  
  # Predict structure using the model ---------------------------------------
  
  class2007 <- predict(rfclust, newdata = sample2007[,4:11], type ="response")
  class2016 <- predict(rfclust, newdata = sample2016[,4:11], type ="response")
  
  class2007 <- as.data.frame(class2007)
  class2016 <- as.data.frame(class2016)
  
  # Bind the cluster classifications to compare -----------------------------
  
  bothclass <- cbind(class2007, class2016)
  names(bothclass) <- c(paste0("Class2007_", trial), paste0("Class2016_",  trial))
  return(bothclass)
}


combinedlist <- mapply(FUN = fun4, a = seedvals, b = trials)
beep()

spreadsheet <- lapply(combinedlist, as.data.frame)
spreadsheet <- do.call(cbind.data.frame, spreadsheet)

write.csv(spreadsheet, "Data/2016/classified_raw.csv")
